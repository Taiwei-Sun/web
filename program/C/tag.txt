 in malloc and calloc is that malloc does not set the memory to zero where as calloc sets allocated memory to zero.
The xmalloc(), xcalloc(), and xrealloc() functions are equivalent to the normal C library functions malloc(), calloc(), and realloc(), except that the memory allocation is checked and is guaranteed to never return NULL (indicating an out of memory condition).


"fileno" returns the file descriptor number of the indicated file. "stdin", "stdout", and "stderr" have stream numbers 0, 1, and 2 respectively. Other files have stream numbers between 3 and 19.






It works around some compiler warnings. Some compilers will warn if you don't use a function parameter. In such a case, you might have deliberately not used that parameter, not be able to change the interface for some reason, but still want to shut up the warning. That (void) casting construct is a no-op that makes the warning go away. Here's a simple example using clang:

int f1(int a, int b)
{
  (void)b;
  return a;
}

int f2(int a, int b)
{
  return a;
}
Build using the -Wunused-parameter flag and presto:

$ clang -Wunused-parameter   -c -o example.o example.c
example.c:7:19: warning: unused parameter 'b' [-Wunused-parameter]
int f2(int a, int b)
                  ^
1 warning generated.






A void* variable is a "generic" pointer to an address in memory.